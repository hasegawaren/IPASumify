from fastapi import FastAPI, UploadFile, File, Form, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional, List, Dict
import io
import re
import httpx
import os
import logging
import tiktoken
from PyPDF2 import PdfReader
from app.services.wiki_scraper import get_wikipedia_summary_from_url
from dotenv import load_dotenv
import uuid

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

load_dotenv()

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

if not DEEPSEEK_API_KEY:
    logging.error("‚ùå DeepSeek API Key is missing! Please set it in the .env file.")
    raise ValueError("DeepSeek API Key is missing! Please set it in the .env file.")

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ dict)
sessions: Dict[str, Dict] = {}

# ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DeepSeek API (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ API ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
MAX_TOKENS = 4000  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á DeepSeek API

def clean_pdf_text(raw_text: str) -> str:
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"""
    text = raw_text.replace("\u0000", "")
    text = re.sub(r"\s+", " ", text)
    return text.strip()

def count_tokens(text: str) -> int:
    """‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    encoding = tiktoken.get_encoding("cl100k_base")
    tokens = encoding.encode(text)
    return len(tokens)

def truncate_text(text: str, max_tokens: int) -> str:
    """‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    encoding = tiktoken.get_encoding("cl100k_base")
    tokens = encoding.encode(text)
    if len(tokens) <= max_tokens:
        return text
    truncated_tokens = tokens[:max_tokens]
    return encoding.decode(truncated_tokens)

def split_text_into_chunks(text: str, max_tokens: int = 2500) -> List[str]:
    """‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô ‡πÜ ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token"""
    encoding = tiktoken.get_encoding("cl100k_base")
    tokens = encoding.encode(text)
    chunks = []
    for i in range(0, len(tokens), max_tokens):
        chunk_tokens = tokens[i:i + max_tokens]
        chunk_text = encoding.decode(chunk_tokens)
        chunks.append(chunk_text)
    return chunks

async def get_deepseek_response(messages: List[Dict[str, str]]) -> str:
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ç‡∏≠‡∏á DeepSeek ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"""
    deepseek_api_url = "https://api.deepseek.com/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": "deepseek-chat",
        "messages": messages,
    }

    logging.info("üîÑ Calling DeepSeek API...")
    logging.debug(f"üì° Request Payload: {payload}")

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(deepseek_api_url, json=payload, headers=headers)
            response.raise_for_status()
            response_data = response.json()

            logging.info("‚úÖ DeepSeek API Response Received")
            logging.debug(f"üì° DeepSeek Response Data: {response_data}")

            if not isinstance(response_data, dict):
                raise ValueError("Invalid response format: response is not a dictionary")
            
            choices = response_data.get("choices")
            if not choices or not isinstance(choices, list):
                raise ValueError("Invalid response format: 'choices' not found or not a list")

            first_choice = choices[0]
            if not isinstance(first_choice, dict):
                raise ValueError("Invalid response format: first choice is not a dictionary")

            message = first_choice.get("message")
            if not isinstance(message, dict):
                raise ValueError("Invalid response format: 'message' not found or not a dictionary")

            content = message.get("content")
            if content is None:
                raise ValueError("Invalid response format: 'content' not found in message")

            logging.info("‚úÖ DeepSeek API Response Processed Successfully")
            return content
    except httpx.HTTPStatusError as e:
        logging.error(f"‚ùå HTTP Error: {e.response.status_code} - {e.response.text}")
        error_detail = e.response.json().get("error", str(e))
        raise HTTPException(status_code=400, detail=f"DeepSeek API error: {error_detail}")
    except httpx.RequestError as e:
        logging.error(f"‚ùå Network Error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Network error: {str(e)}")
    except Exception as e:
        logging.error(f"‚ùå Unexpected Error in get_deepseek_response: {type(e).__name__}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Unexpected error: {str(e)}")

@app.post("/api/summarize")
async def summarize(
    input_type: str = Form(...),
    user_text: str = Form(None),
    pdf_file: Optional[UploadFile] = File(None),
    wiki_url: Optional[str] = Form(None),
    session_id: str = Form(None)
):
    logging.info(f"üì© Received Request - input_type: {input_type}")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á session_id ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not session_id:
        session_id = str(uuid.uuid4())
        logging.info(f"üÜï Created new session_id: {session_id}")
    
    if session_id not in sessions:
        sessions[session_id] = {"context": None, "summary": None}

    article_text = ""
    try:
        if input_type == "text":
            logging.info("üìù Processing Text Input")
            article_text = user_text or ""
            logging.debug(f"üìú User Text: {article_text[:200]}...")  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å

        elif input_type == "pdf":
            logging.info("üìÑ Processing PDF File")
            if not pdf_file:
                logging.error("‚ùå No PDF file uploaded.")
                raise HTTPException(status_code=400, detail="No PDF file uploaded.")
            try:
                content = await pdf_file.read()
                pdf_reader = PdfReader(io.BytesIO(content))
                raw_text = ""
                for page in pdf_reader.pages:
                    page_text = page.extract_text() or ""
                    raw_text += page_text + "\n"
                article_text = clean_pdf_text(raw_text)
                logging.debug(f"üìú Extracted PDF Text: {article_text[:200]}...")  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
            except Exception as e:
                logging.error(f"‚ùå PDF Processing Error: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Error processing PDF: {str(e)}")

        elif input_type == "wiki":
            logging.info("üåç Fetching Wikipedia Summary")
            if not wiki_url:
                logging.error("‚ùå No wiki_url provided.")
                raise HTTPException(status_code=400, detail="No wiki_url provided.")

            try:
                result = get_wikipedia_summary_from_url(wiki_url)
                logging.debug(f"üìú Wikipedia API Response: {result}")

                if "error" in result:
                    logging.error(f"‚ùå Wikipedia API Error: {result['error']}")
                    raise HTTPException(status_code=404, detail=result["error"])

                article_text = result["content"]
            except Exception as e:
                logging.error(f"‚ùå Wikipedia Fetch Error: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Error fetching Wikipedia content: {str(e)}")

        else:
            logging.error(f"‚ùå Invalid input_type: {input_type}")
            raise HTTPException(status_code=400, detail="Invalid input_type. Use text/pdf/wiki")

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÉ‡∏ô session
        sessions[session_id]["context"] = article_text

        # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô ‡πÜ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô
        chunks = split_text_into_chunks(article_text, max_tokens=2500)
        summaries = []

        for i, chunk in enumerate(chunks):
            logging.info(f"üìã Processing Chunk {i + 1}/{len(chunks)}")
            final_text = f"‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:\n\n{chunk}\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"
            messages = [{"role": "user", "content": final_text}]
            summary_result = await get_deepseek_response(messages)
            summaries.append(summary_result)
            logging.info(f"‚úÖ Chunk {i + 1} Summarized: {summary_result[:200]}...")

        # ‡∏£‡∏ß‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        final_summary = " ".join(summaries)
        sessions[session_id]["summary"] = final_summary
        logging.info("‚úÖ All Chunks Processed and Combined")

        return {
            "session_id": session_id,
            "input_type": input_type,
            "article_text_len": len(article_text),
            "num_chunks": len(chunks),
            "summary": final_summary,
        }
    except Exception as e:
        logging.error(f"‚ùå Error in summarize: {type(e).__name__}: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á endpoint /api/chat ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö JSON ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
@app.post("/api/chat")
async def chat(
    payload: Dict = Body(...)
):
    session_id = payload.get("session_id")
    question = payload.get("question")

    if not session_id:
        logging.error("‚ùå Missing session_id in request.")
        raise HTTPException(status_code=422, detail="Missing session_id in request body.")
    if not question:
        logging.error("‚ùå Missing question in request.")
        raise HTTPException(status_code=422, detail="Missing question in request body.")

    logging.info(f"üì© Received Chat Request - session_id: {session_id}")

    if session_id not in sessions or not sessions[session_id]["context"]:
        logging.error("‚ùå No context found for this session.")
        raise HTTPException(status_code=400, detail="No context found. Please summarize a document first.")

    context = sessions[session_id]["context"]
    summary = sessions[session_id]["summary"]

    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        prompt_template = (
            "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:\n\n"
            "{context}\n\n"
            "‡πÅ‡∏•‡∏∞‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n\n"
            "{summary}\n\n"
            "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {question}\n\n"
            "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"
        )

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏Ç‡∏≠‡∏á prompt ‡πÄ‡∏ï‡πá‡∏°
        full_prompt = prompt_template.format(context=context, summary=summary, question=question)
        total_tokens = count_tokens(full_prompt)

        if total_tokens > MAX_TOKENS:
            logging.warning(f"‚ö†Ô∏è Prompt exceeds token limit ({total_tokens} > {MAX_TOKENS}). Truncating context and summary.")
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context ‡πÅ‡∏•‡∏∞ summary
            fixed_prompt = (
                "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:\n\n"
                "\n\n"
                "‡πÅ‡∏•‡∏∞‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n\n"
                "\n\n"
                "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: " + question + "\n\n"
                "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"
            )
            fixed_tokens = count_tokens(fixed_prompt)
            available_tokens = MAX_TOKENS - fixed_tokens

            # ‡πÅ‡∏ö‡πà‡∏á token ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ context ‡πÅ‡∏•‡∏∞ summary (‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö summary ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
            context_tokens = int(available_tokens * 0.3)  # 30% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context
            summary_tokens = int(available_tokens * 0.7)  # 70% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö summary

            truncated_context = truncate_text(context, context_tokens)
            truncated_summary = truncate_text(summary, summary_tokens)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
            final_text = prompt_template.format(
                context=truncated_context,
                summary=truncated_summary,
                question=question
            )
            logging.info(f"‚úÖ Truncated prompt to {count_tokens(final_text)} tokens.")
        else:
            final_text = full_prompt

        messages = [{"role": "user", "content": final_text}]
        answer = await get_deepseek_response(messages)
        logging.info(f"‚úÖ Chat Answer Generated: {answer[:200]}...")

        return {
            "session_id": session_id,
            "answer": answer,
        }
    except Exception as e:
        logging.error(f"‚ùå Error in chat: {type(e).__name__}: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))